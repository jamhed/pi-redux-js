// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(["pi/Pi"], function(aPi) {
  var aEl;
  return aEl = (function(superClass) {
    extend(aEl, superClass);

    function aEl() {
      return aEl.__super__.constructor.apply(this, arguments);
    }

    aEl.prototype.text = null;

    aEl.prototype.attr = function() {
      return aEl.__super__.attr.apply(this, arguments).concat(["uri", "get", "template"]);
    };

    aEl.prototype.init = function() {
      return this.load();
    };

    aEl.prototype.load = function() {
      var uri;
      if (this.a.template) {
        return this.set(this.tmpl(this.a.template, {}));
      }
      if (this.a.uri === void 0) {
        return this.set(this.e.html());
      }
      uri = this.parse_uri();
      if (this.a.get === "" || this.a.get) {
        return $.get(uri.fragment() + ".html", uri.query(), (function(_this) {
          return function(text) {
            return _this.set(text);
          };
        })(this));
      } else {
        return $.post(uri.fragment(), (function(_this) {
          return function(text) {
            return _this.set(text);
          };
        })(this));
      }
    };

    aEl.prototype.set = function(text1) {
      this.text = text1;
      this.e.html(this.text);
      return this.process();
    };

    return aEl;

  })(aPi);
});
