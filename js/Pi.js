// Generated by CoffeeScript 1.6.2
define(["pi/Promise"], function(Promise) {
  var aPi;
  return aPi = (function() {
    aPi.prototype.a = null;

    aPi.prototype.data = null;

    aPi.prototype.e = null;

    aPi.prototype.rt = null;

    aPi.prototype.uid = null;

    aPi.prototype.waitTimeout = 5000;

    aPi.prototype.retryTimeout = 100;

    aPi.init = function() {};

    aPi.prototype.attr = function() {
      return ["uid"];
    };

    aPi.prototype._localget = function(k) {
      var e;
      try {
        return localStorage[k];
      } catch (_error) {
        e = _error;
        return this.rt.server_log("localstorage fail.");
      }
    };

    aPi.prototype._localset = function(k, v) {
      var e;
      try {
        return localStorage[k] = v;
      } catch (_error) {
        e = _error;
        return this.rt.server_log("localstorage fail set.");
      }
    };

    aPi.prototype.localSet = function(k, v) {
      return this._localset(this.uid + "/" + k, v);
    };

    aPi.prototype.localGet = function(k) {
      return this._localget(this.uid + "/" + k);
    };

    aPi.prototype.globalSet = function(k, v) {
      return this._localset(this.rt.uri.fragment() + "/" + this.uid + "/" + k, v);
    };

    aPi.prototype.globalGet = function(k) {
      return this._localget(this.rt.uri.fragment() + "/" + this.uid + "/" + k);
    };

    aPi.prototype.fragmentSet = function(k, v) {
      return this._localset(this.rt.uri.fragment() + "/" + k, v);
    };

    aPi.prototype.fragmentGet = function(k) {
      return this._localget(this.rt.uri.fragment() + "/" + k);
    };

    function aPi(rt, e, uid) {
      var a, _i, _len, _ref,
        _this = this;
      this.rt = rt;
      this.e = e;
      this.uid = uid;
      this.a = {};
      _ref = this.attr();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        this.a[a] = this.e.attr(a);
      }
      this.data = $.extend({}, this.e.data());
      if (this.a.uid) {
        this.uid = this.a.uid;
      }
      this.sub("rpc", function(e, args) {
        var r;
        if (!_this[args.method]) {
          _this.error("Method is not defined:", args.method, "for:", _this.uid);
        }
        r = _this[args.method].apply(_this, args.args);
        if (args.callback) {
          return args.callback(r);
        }
      });
      this.init();
    }

    aPi.prototype.init = function() {};

    aPi.prototype.debug = function() {
      var _ref;
      return (_ref = this.rt).debug.apply(_ref, arguments);
    };

    aPi.prototype.error = function() {
      var _ref;
      return (_ref = this.rt).error.apply(_ref, arguments);
    };

    aPi.prototype.post = function(uri, args, callback) {
      var _this = this;
      return $.post(uri, {
        packet: JSON.stringify({
          args: args,
          query: this.rt.uri.query(true),
          data: this.data
        })
      }, (function(r) {
        if (callback) {
          return callback(r);
        }
      }), "json");
    };

    aPi.prototype.ppost = function(uri, args) {
      var p,
        _this = this;
      p = new Promise();
      $.post(uri, {
        packet: JSON.stringify({
          args: args,
          query: this.rt.uri.query(true),
          data: this.data
        })
      }, (function(r) {
        return p.success(r);
      }), "json");
      return p;
    };

    aPi.prototype.subscribe = function(target, event, callback) {
      return this.sub("" + target + "@" + event, function(e, args) {
        return callback(args);
      });
    };

    aPi.prototype.rpc = function(targets, args, callback) {
      var m, method, msgre, seen, selector, _ref;
      msgre = /\s*(.*?)\@(\S+)\s*/g;
      seen = 0;
      while (m = msgre.exec(targets)) {
        seen = 1;
        _ref = [m[1], m[2]], selector = _ref[0], method = _ref[1];
        this.pub("" + selector + "@rpc", {
          method: method,
          args: args,
          callback: callback
        });
      }
      if (seen === 0) {
        return this.error("Targets syntax error:", targets, this.uid);
      }
    };

    aPi.prototype.rpc_to = function(target, method, args, callback) {
      return this.pub("" + target + "@rpc", {
        method: method,
        args: args,
        callback: callback
      });
    };

    aPi.prototype.rpc_el = function(el, method, args, callback) {
      return this.msg_to(el, "rpc", {
        method: method,
        args: args,
        callback: callback
      });
    };

    aPi.prototype.sub = function(ev, f) {
      var m, source, _ref,
        _this = this;
      if (m = /^(.*)\@(.*)$/.exec(ev)) {
        _ref = [m[1], m[2]], source = _ref[0], ev = _ref[1];
        if (source === "server") {
          return this.rt.sse.on(ev, function(_e, args) {
            return f(_e, args.args, args.caller);
          });
        } else if (source === "router") {
          return this.rt.rte.on(ev, function(_e, args) {
            return f(_e, args.args, args.caller);
          });
        } else {
          return $(source).on(ev, function(_e, args) {
            return f(_e, args.args, args.caller);
          });
        }
      } else {
        return this.e.on(ev, function(_e, args) {
          return f(_e, args.args, args.caller);
        });
      }
    };

    aPi.prototype.pub = function(targets, args) {
      var cl, el, m, message, msgre, selector, _ref,
        _this = this;
      msgre = /\s*(.*?)\@(\S+)\s*/g;
      this.debug("pub()", this.uid, "->", targets);
      while (m = msgre.exec(targets)) {
        _ref = [m[1] || "[pi]", m[2]], selector = _ref[0], message = _ref[1];
        if (!message) {
          return;
        }
        if (selector === "parent") {
          el = this.e.parent().closest("[pi]");
          if (el.attr("processed")) {
            this.msg_to(el, message, args);
          } else {
            (function(el, message, args) {
              return _this.wait((function() {
                return el.attr("processed");
              }), function() {
                return _this.msg_to(el, message, args);
              });
            })(el, message, args);
          }
        } else if (selector === "server") {
          this.post(message, args);
        } else if (selector === "router") {
          this.rt.rte.triggerHandler(message, {
            args: args,
            caller: this
          });
        } else if ((cl = /^closest\((.*?)\)\s*(.*)$/.exec(selector))) {
          el = this.e.closest(cl[1]);
          if (cl[2]) {
            el = el.find(cl[2]);
          }
          if (el.attr("processed")) {
            this.msg_to(el, message, args);
          } else {
            (function(el, message, args) {
              return _this.wait((function() {
                return el.attr("processed");
              }), function() {
                return _this.msg_to(el, message, args);
              });
            })(el, message, args);
          }
        } else {
          if (!$(selector).length || !$(selector).attr("processed")) {
            (function(selector, message, args) {
              return _this.wait((function() {
                return _this.exists(selector);
              }), function() {
                return _this.send_message(selector, message, args);
              });
            })(selector, message, args);
          } else {
            this.send_message(selector, message, args);
          }
        }
      }
    };

    aPi.prototype.send_message = function(selector, message, args) {
      var o;
      o = this;
      return $(selector).each(function(i, _e) {
        var e, _ref;
        e = $(_e);
        if (!((_ref = e.data("events") || $._data(_e, "events")) != null ? _ref[message] : void 0)) {
          return o.rt.server_log(("@pub() no handler on message: " + message + ", target: " + selector) + " dst: pi=" + e.attr("pi") + " src: pi=" + o.uid);
        } else {
          return o.msg_to($(e), message, args);
        }
      });
    };

    aPi.prototype.event = function(message, args) {
      return this.msg_to(this.e, message, args);
    };

    aPi.prototype.msg_to = function(target, message, args) {
      return target.triggerHandler(message, {
        args: args,
        caller: this
      });
    };

    aPi.prototype.exists = function(selector) {
      return $(selector).length > 0;
    };

    aPi.prototype.wait = function(check, action) {
      var handler, start,
        _this = this;
      start = new Date().getTime();
      return handler = setInterval((function() {
        var status;
        status = check();
        if (status) {
          clearInterval(handler);
          action();
        }
        if (new Date().getTime() - start > _this.waitTimeout) {
          _this.rt.server_log("wait() timeout", check, action);
          return clearInterval(handler);
        }
      }), this.retryTimeout);
    };

    aPi.prototype.wait_existance = function(selector, action) {
      var _this = this;
      return this.wait((function() {
        return _this.exists(selector);
      }), action);
    };

    aPi.prototype.wait_ajax_done = function(action) {
      return this.wait_existance("#pi-status[ajax=0][run=0]", action);
    };

    aPi.prototype.unsub = function() {
      var _ref;
      return (_ref = this.e).off.apply(_ref, arguments);
    };

    aPi.prototype.append = function(tmpl, args) {
      return this.rt.append(tmpl, args);
    };

    return aPi;

  })();
});
