// Generated by CoffeeScript 1.10.0
var slice = [].slice;

define(["lib/jquery", "pi/Logger"], function(jQuery, Logger) {
  var Processor;
  return Processor = (function() {
    Processor.prototype["class"] = null;

    Processor.prototype.count = null;

    Processor.prototype.status_e = null;

    Processor.prototype.logger = null;

    Processor.prototype.pi_run = 0;

    Processor.prototype.pi_ajax = 0;

    Processor.prototype.debug = function() {
      var ref;
      return (ref = this.logger).debug.apply(ref, ["processor"].concat(slice.call(arguments)));
    };

    Processor.prototype.err = function() {
      var ref;
      return (ref = this.logger).err.apply(ref, ["processor"].concat(slice.call(arguments)));
    };

    Processor.prototype.update_status = function(pi_run, pi_ajax) {
      this.pi_run = pi_run;
      this.pi_ajax = pi_ajax;
      this.status_e.attr("run", this.pi_run);
      return this.status_e.attr("ajax", this.pi_ajax);
    };

    function Processor() {
      this.logger = new Logger;
      this["class"] = {};
      this.count = {};
      $(document).ajaxSend((function(_this) {
        return function(ev, xhr, r) {
          return _this.update_status(_this.pi_run, _this.pi_ajax + 1);
        };
      })(this));
      $(document).ajaxComplete((function(_this) {
        return function(ev, xhr, s) {
          return _this.update_status(_this.pi_run, _this.pi_ajax - 1);
        };
      })(this));
      requirejs.onError = (function(_this) {
        return function(err) {
          if (_this.pi_run > 0) {
            _this.update_status(_this.pi_run - 1, _this.pi_ajax);
          }
          return _this.err("type:", err.requireType, "module:", err.requireModules, "err:", err);
        };
      })(this);
      this.status_e = $("<div>").attr("id", "pi-status");
      $("body").append(this.status_e);
      this.pi(document);
    }

    Processor.prototype.pi_bind = function(name, e) {
      if (e.attr("processed")) {
        return;
      }
      this.count[name] = this.count[name] ? this.count[name] + 1 : 1;
      e.attr("processed", this.count[name]);
      return new this["class"][name](this, e, "[pi='" + name + "'][processed=" + this.count[name] + "]");
    };

    Processor.prototype.pi = function(context) {
      var fn, j, len, s, seen, stack, unames, ustack;
      this.update_status(this.pi_run + 1, this.pi_ajax);
      stack = [];
      $("[pi]", context).each((function(_this) {
        return function(i, _e) {
          var e, name;
          e = $(_e);
          name = e.attr("pi");
          if (_this["class"][name]) {
            return _this.pi_bind(name, e);
          } else {
            return stack.push({
              name: name,
              e: e
            });
          }
        };
      })(this));
      seen = {};
      ustack = [];
      fn = function(s) {
        if (!seen[s.name]) {
          ustack.push(s);
          return seen[s.name] = 1;
        }
      };
      for (j = 0, len = stack.length; j < len; j++) {
        s = stack[j];
        fn(s);
      }
      unames = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = ustack.length; k < len1; k++) {
          s = ustack[k];
          results.push(s.name);
        }
        return results;
      })();
      return require(unames, (function(_this) {
        return function() {
          var Name, Names;
          Names = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          while (s = ustack.shift()) {
            Name = Names.shift();
            if (!_this["class"][name]) {
              _this["class"][s.name] = Name;
              Name.init(_this);
            }
          }
          while (s = stack.shift()) {
            _this.pi_bind(s.name, s.e);
          }
          return _this.update_status(_this.pi_run - 1, _this.pi_ajax);
        };
      })(this));
    };

    return Processor;

  })();
});
